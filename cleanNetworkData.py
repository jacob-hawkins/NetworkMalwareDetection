import pandas as pd
import numpy as np
from random import getrandbits
from tabulate import tabulate
import visualizations as vis

data_types = {
    'ts': float,
    'uid': str,
    'id.orig_h': str,
    'id.orig_p': str,
    'id.resp_h': str,
    'id.resp_p': str,
    'proto': str,
    'service': str,
    'duration': str,
    'orig_bytes': str,
    'resp_bytes': str,
    'conn_state': str,
    'local_orig': str,
    'local_resp': str,
    'missed_bytes': str,
    'history': str,
    'orig_pkts': str,
    'orig_ip_bytes': str,
    'resp_pkts': str,
    'resp_ip_bytes': str,
    'tunnel_parents': str,
    'label': str,
    'detailed-label': str,
}

"""
I have dropped the origin IP and destination IP addresses, since malware could be sent from any IP to any IP 
I thought it would be better at generalizing to non-training data if we didn't include these features. 
- DLew
"""
def readAndCleanData(path):
    network_data = pd.read_csv(path, sep='|', dtype=data_types, keep_default_na=True, na_values='-')
    network_data = network_data.drop(columns=['uid', 'id.orig_h', 'id.resp_h', 'local_orig', 'local_resp', 
                                              'tunnel_parents', 'detailed-label']).dropna()

    print(f'{path}: {len(network_data.index)} read')

    return network_data

def readData():
    nd_1 = readAndCleanData('data/CTU-IoT-Malware-Capture-1-1conn.log.labeled.csv')
    nd_2 = readAndCleanData('data/CTU-IoT-Malware-Capture-3-1conn.log.labeled.csv')
    nd_3 = readAndCleanData('data/CTU-IoT-Malware-Capture-9-1conn.log.labeled.csv')
    nd_4 = readAndCleanData('data/CTU-IoT-Malware-Capture-20-1conn.log.labeled.csv')
    nd_5 = readAndCleanData('data/CTU-IoT-Malware-Capture-21-1conn.log.labeled.csv')
    nd_6 = readAndCleanData('data/CTU-IoT-Malware-Capture-34-1conn.log.labeled.csv')
    nd_7 = readAndCleanData('data/CTU-IoT-Malware-Capture-35-1conn.log.labeled.csv')
    nd_8 = readAndCleanData('data/CTU-IoT-Malware-Capture-42-1conn.log.labeled.csv')
    nd_9 = readAndCleanData('data/CTU-IoT-Malware-Capture-44-1conn.log.labeled.csv')
    nd_10 = readAndCleanData('data/CTU-IoT-Malware-Capture-48-1conn.log.labeled.csv')
    nd_11 = readAndCleanData('data/CTU-IoT-Malware-Capture-60-1conn.log.labeled.csv')

    frames = [nd_1, nd_2, nd_3, nd_4, nd_5, nd_6, nd_7, nd_8, nd_9, nd_10, nd_11]
    master = pd.concat(frames)

    return master

def outputPrettyData(data: pd.DataFrame): 
    with open('data/prettyData.txt', 'w') as f: 
        f.write(tabulate(data, headers = 'keys', tablefmt = 'psql'))
        f.close()

def createMappingDict(col: pd.DataFrame) -> dict: 
    mappingDict = {}
    data_arr = col.to_numpy()

    for (idx, val) in enumerate(np.unique(data_arr)): 
        mappingDict[val] = idx

    return mappingDict

def columnStrToInt(data: pd.DataFrame, col: str) -> pd.DataFrame: 
    mapDict = createMappingDict(data[col])
    data[col] = data[col].map(mapDict)

    return data 

def cleanLabels(data: pd.DataFrame): 
    mappingDict = {}
    data_arr = data['label'].to_numpy()

    for i in np.unique(data_arr): 
        if i.startswith("Malicious"): 
            mappingDict[i] = 0
        else: 
            mappingDict[i] = 1

    data['label'] = data['label'].map(mappingDict)

    return data

def mapNetworkData(data): 
    # data = pd.read_csv('data/master.csv')

    # There are 11 different origin IP addresses. 
    # print(data['id.orig_h'].nunique())

    # Three are 288 different destination IP addresses.           
    # print(data['id.resp_h'].nunique())

    # There are 2 different protocols. 
    # print(data['proto'].nunique())

    # There are 6 different services 
    # print(data['service'].nunique())

    # There are 101 different histories 
    # print(data['history'].nunique())

    # There are 5 different labels 
    # print(data['label'].nunique())

    # There are 8 different connection states 
    # print(data['conn_state'].nunique())
    
    # data = columnStrToInt(data, 'id.orig_h')
    # data = columnStrToInt(data, 'id.resp_h')
    data = columnStrToInt(data, 'proto')
    data = columnStrToInt(data, 'service')
    data = columnStrToInt(data, 'history')
    data = columnStrToInt(data, 'conn_state')

    data = cleanLabels(data)

    # There are 2 different labels after mapping! 
    # print(data['label'].nunique())

    outputPrettyData(data)

    data.to_csv('data/cleanFeatures.csv', index=False)

def balanceData(data: pd.DataFrame) -> pd.DataFrame: 

    benignDataPoints = data[data['label'] == 1]
    benignCount      = len(benignDataPoints)
    sampledMalicious = (data[data['label'] == 0]).sample(n=benignCount)
    
    balancedData = pd.concat([benignDataPoints, sampledMalicious])
    balancedData.to_csv('data/balancedData.csv', index=False)

    return balancedData

def calcPieChartPercents(data: pd.DataFrame):
    malicious = data[data['label'] == 0]
    benign = data[data['label'] != 0]

    malCount = len(malicious)
    benCount = len(benign)
    totalCount = len(data['label'])


    malPct = (malCount / totalCount) * 100
    benPct = (benCount / totalCount) * 100

    percentages = [int(malPct), int(benPct)]
    labels = ['Malicious', 'Benign']
    vis.createPieChart(percentages, labels, 'prebalanced_pie_chart')

def calcCorrMatrix(data: pd.DataFrame):
    matrix = data.corr()
    vis.createCorrMatrix(matrix, list(data), 'Correlation Matrix', 'premodel_corr_matrix')
  
data = readData()
mapNetworkData(data)
calcPieChartPercents(data)

balancedData = balanceData(data)
calcCorrMatrix(balancedData.drop(columns=['label']))

