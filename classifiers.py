import argparse
import numpy as np
import pandas as pd

from sklearn.tree import plot_tree
import os
import matplotlib.pyplot as plt

from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB

from sklearn.ensemble import BaggingClassifier

from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split

import visualizations as vis

parser = argparse.ArgumentParser("All the classifiers!")
parser.add_argument("--split_test_size", default=0.33, type=float, help="Fraction of data to be used as testing data")
parser.add_argument("--split_seed", default=42, type=int, help="Seed used to determine the train/test split of the data")
args = parser.parse_args()

csv = pd.read_csv('data/balancedData.csv')

y = csv['label']
csv = csv.drop('label', axis=1)
X = csv

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=args.split_test_size, random_state=args.split_seed)

cn = "Random Forest"
clf = RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)
clf.fit(X_train, y_train)
y_predict = clf.predict(X_train)
train_acc = accuracy_score(y_train, y_predict)
training_cm = confusion_matrix(y_train, y_predict)

y_predict = clf.predict(X_test)
test_acc = accuracy_score(y_test, y_predict)

print("Name:", cn)
print("Training:", train_acc)
print("Testing:", test_acc)

plt.figure(figsize=(20, 10))
plot_tree(clf.estimators_[0], filled=True, feature_names=X_train.columns, class_names=True, rounded=True)
plt.title(f"Decision Tree from {cn}")

# Create the 'results' directory if it doesn't exist
results_dir = os.path.join(os.getcwd(), 'results')
os.makedirs(results_dir, exist_ok=True)

# Save the figure in the 'results' directory
file_path = os.path.join(results_dir, 'decision_tree.png')
plt.savefig(file_path)

vis.createCorrMatrix(training_cm, y.unique(), 'Random Forest Training Confusion Matrix', f'training_confusion_matrix')